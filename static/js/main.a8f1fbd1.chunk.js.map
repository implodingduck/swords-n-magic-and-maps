{"version":3,"sources":["logo.svg","UseWindowDimensions.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","Map","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","className","style","border","MapContainer","center","zoom","minZoom","maxNativeZoom","TileLayer","attribution","url","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAAe,I,4BCEf,SAASA,IACP,MAAmDC,OACnD,MAAO,CACLC,MAFF,EAAQC,WAGNC,OAHF,EAA2BC,a,WCqBdC,EArBH,WACR,IACA,EDKW,WACb,MAAgDC,mBAASP,KAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KAWA,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBT,KAItB,OADAC,OAAOW,iBAAiB,SAAUD,GAC3B,kBAAMV,OAAOY,oBAAoB,SAAUF,MACjD,IAEIH,ECjBqBM,GAAlBV,EAAR,EAAQA,OAAR,EAAgBF,MAChB,OACI,qBAAKa,UAAU,iBAAiBC,MAAQ,CAAEC,OAAQ,qBAAlD,SACI,cAACC,EAAA,EAAD,CACIC,OALY,CAAC,EAAG,GAMhBC,KAAM,EACNJ,MAAQ,CAAEZ,OAAQA,EAAS,MAC3BiB,QAAS,EACTC,cAAe,EALnB,SAOI,cAACC,EAAA,EAAD,CACAC,YAAY,mDACZC,IAAI,uF,MCNLC,MANf,WACE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8f1fbd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import { MapContainer, TileLayer } from \"react-leaflet\";\nimport useWindowDimensions from \"./UseWindowDimensions\";\n\nconst Map = () => {\n    const defaultPosition = [0 ,0]; \n    const { height, width } = useWindowDimensions();\n    return (\n        <div className=\"map__container\" style={ { border: \"1px solid #ff00ff\" } }>\n            <MapContainer\n                center={defaultPosition}\n                zoom={1}\n                style={ { height: height + \"px\" } }\n                minZoom={0}\n                maxNativeZoom={3}\n            >\n                <TileLayer\n                attribution='Map From Kindred Games: Swords n Magic and Stuff'\n                url=\"https://implodingduck.github.io/swords-n-magic-and-maps/tiles/{z}/{x}/{y}.png\"\n                />\n            </MapContainer>\n        </div>\n    );\n};\n\nexport default Map\n\n","import logo from './logo.svg';\nimport './App.css';\nimport Map from './Map'\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  return (\n    <Map></Map>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}