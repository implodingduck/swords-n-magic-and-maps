{"version":3,"sources":["logo.svg","UseWindowDimensions.js","MapFunctions.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","MapFuctions","useState","position","setPosition","map","useMapEvents","click","e","console","log","latlng","flyTo","getZoom","CircleMarker","center","pathOptions","color","radius","Popup","lng","lat","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconUrl","markerIcon","iconRetinaUrl","markerIcon2x","shadowUrl","markerShadow","Map","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","className","style","border","MapContainer","zoom","TileLayer","attribution","url","minZoom","maxNativeZoom","noWrap","tms","GeoJSON","data","geojsondata","onEachFeature","feature","layer","bindPopup","JSON","stringify","properties","pointToLayer","marker","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8qBAAe,I,oDCEf,SAASA,IACP,MAAmDC,OACnD,MAAO,CACLC,MAFF,EAAQC,WAGNC,OAHF,EAA2BC,a,mCCuBdC,EArBK,WAChB,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAMC,YAAa,CACvBC,MADuB,SACjBC,GACJC,QAAQC,IAAIF,EAAEG,QACdP,EAAYI,EAAEG,QACdN,EAAIO,MAAMJ,EAAEG,OAAQN,EAAIQ,cAI5B,OAAoB,OAAbV,EAAoB,KACzB,cAACW,EAAA,EAAD,CACEC,OAAQZ,EACRa,YAAa,CAAEC,MAAO,SACtBC,OAAQ,GAHV,SAKE,eAACC,EAAA,EAAD,eAAUhB,EAASiB,IAAnB,KAA4BjB,EAASkB,IAArC,U,uCCPDC,IAAEC,KAAKC,QAAQC,UAAUC,YAChCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,QAASC,IACTC,cAAeC,IACfC,UAAWC,MAGf,IAyCeC,EAzCH,WACR,IACA,EFbW,WACb,MAAgDhC,mBAASP,KAAzD,mBAAOwC,EAAP,KAAyBC,EAAzB,KAWA,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBzC,KAItB,OADAC,OAAO2C,iBAAiB,SAAUD,GAC3B,kBAAM1C,OAAO4C,oBAAoB,SAAUF,MACjD,IAEIH,EECqBM,GAAlB1C,EAAR,EAAQA,OAAR,EAAgBF,MAYhB,OACI,qBAAK6C,UAAU,iBAAiBC,MAAQ,CAAEC,OAAQ,qBAAlD,SACI,eAACC,EAAA,EAAD,CACI9B,OAhBY,EAAE,IAAK,IAiBnB+B,KAAM,EACNH,MAAQ,CAAE5C,OAAQA,EAAS,MAH/B,UAMI,cAACgD,EAAA,EAAD,CACAC,YAAY,mDACZC,IAAI,gFACJC,QAAS,EACTC,cAAe,EACfC,QAAQ,EACRC,KAAK,IAGL,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAASC,KAAMC,EAAaC,cAtBd,SAACC,EAASC,GAChClD,QAAQC,IAAIgD,GACZC,EAAMC,UAAN,oCAA6CC,KAAKC,UAAUJ,EAAQK,YAApE,YAoBsEC,aA5B/C,SAACN,EAAS/C,GAGjC,OAFAF,QAAQC,IAAI,sBACZD,QAAQC,IAAIgD,GACLpC,IAAE2C,OAAOtD,Y,MCjBTuD,MANf,WACE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f300cacf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import { useState } from \"react\";\nimport { useMapEvents, CircleMarker, Popup } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\n\nconst MapFuctions = () => {\n    const [position, setPosition] = useState(null)\n    const map = useMapEvents({\n      click(e) {\n        console.log(e.latlng)\n        setPosition(e.latlng)\n        map.flyTo(e.latlng, map.getZoom())\n      }\n    })\n  \n    return position === null ? null : (\n      <CircleMarker \n        center={position} \n        pathOptions={{ color: 'green' }}\n        radius={10}\n      >\n        <Popup>[{ position.lng }, { position.lat }]</Popup>\n      </CircleMarker>\n    )\n}\n\nexport default MapFuctions","import { MapContainer, TileLayer, GeoJSON, Popup } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\nimport useWindowDimensions from \"./UseWindowDimensions\";\n\nimport MapFuctions from \"./MapFunctions\";\n\nimport geojsondata from './snmgeojson.json'\n\nimport L from 'leaflet';\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerIcon from 'leaflet/dist/images/marker-icon.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconUrl: markerIcon,\n    iconRetinaUrl: markerIcon2x,\n    shadowUrl: markerShadow,\n})\n\nconst Map = () => {\n    const defaultPosition = [-60 ,-30]; \n    const { height, width } = useWindowDimensions();\n\n    const handlePointToLayer = (feature, latlng) => {\n        console.log('handlePointToLayer')\n        console.log(feature)\n        return L.marker(latlng);\n    }\n\n    const handleEachFeature = (feature, layer) =>{\n        console.log(feature)\n        layer.bindPopup(`<div class=\"featurepopup\">${JSON.stringify(feature.properties)}</div>`)\n    }\n    return (\n        <div className=\"map__container\" style={ { border: \"1px solid #ff00ff\" } }>\n            <MapContainer\n                center={defaultPosition}\n                zoom={3}\n                style={ { height: height + \"px\" } }\n                \n            >\n                <TileLayer\n                attribution='Map From Kindred Games: Swords n Magic and Stuff'\n                url=\"https://implodingduck.github.io/swords-n-magic-and-maps/tiles/{z}/{x}/{y}.png\"\n                minZoom={0}\n                maxNativeZoom={3}\n                noWrap={true}\n                tms={true}\n                />\n\n                <MapFuctions></MapFuctions>\n                <GeoJSON data={geojsondata} onEachFeature={handleEachFeature} pointToLayer={handlePointToLayer}>\n                    \n                </GeoJSON>\n                \n            </MapContainer>\n        </div>\n    );\n};\n\nexport default Map\n\n","import logo from './logo.svg';\nimport './App.css';\nimport Map from './Map'\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  return (\n    <Map></Map>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}